
// IdentityBackend returns a new instance of {{.PackageName}}.IdentityDBBackend
func IdentityBackend() {{.PackageName}}.IdentityDBBackend {
	var mocker IdentityDB

	db := make(map[string]{{.PackageName}}.Identity)

	mocker.CountFunc = func(ctx context.Context) (int, error) {
		return len(db), nil
	}

	mocker.CreateFunc = func(ctx context.Context, elem {{.PackageName}}.Identity) error {
		if _, exist := db[elem.PublicID]; exist {
			return errors.New("record already exists")
		}

		db[elem.PublicID] = elem
		return nil
	}

	mocker.DeleteFunc = func(ctx context.Context, publicID string) error {
		if _, exist := db[publicID]; !exist {
			return {{.PackageName}}.ErrNotFound
		}
		delete(db, publicID)
		return nil
	}

	mocker.GetAllByOrderFunc = func(ctx context.Context, order string, orderBy string) ([]{{.PackageName}}.Identity, error) {
		var records []{{.PackageName}}.Identity
		for _, elem := range db {
			records = append(records, elem)
		}
		return records, nil
	}

	mocker.GetAllFunc = func(ctx context.Context, order string, orderBy string, page int, responsePerPage int) ([]{{.PackageName}}.Identity, int, error) {
		var records []{{.PackageName}}.Identity
		for _, elem := range db {
			records = append(records, elem)
		}
		return records, len(records), nil
	}

	mocker.GetFunc = func(ctx context.Context, publicID string) ({{.PackageName}}.Identity, error) {
		elem, exist := db[publicID]
		if !exist {
			return elem, {{.PackageName}}.ErrNotFound
		}
		return elem, nil
	}

	mocker.GetByFieldFunc = func(ctx context.Context, key string, value interface{}) ({{.PackageName}}.Identity, error) {
		val := fmt.Sprintf("%+s", value)
		for _, record := range db {
			switch strings.ToLower(key) {
			case "refresh_token":
				if record.RefreshToken == val {
					return record, nil
				}
			case "target_id":
				if record.TargetID == val {
					return record, nil
				}
			case "public_id":
				if record.PublicID == val {
					return record, nil
				}
			}
		}

		return {{.PackageName}}.Identity{}, {{.PackageName}}.ErrNotFound
	}

	mocker.UpdateFunc = func(ctx context.Context, publicID string, elem {{.PackageName}}.Identity) error {
		if _, exist := db[publicID]; !exist {
			return {{.PackageName}}.ErrNotFound
		}

		db[publicID] = elem
		return nil
	}

	return mocker
}

// IdentityDB defines a concrete struct which implements the methods for the
// {{.PackageName}}.IdentityDBBackend interface. All methods will panic, so add necessary internal logic.
type IdentityDB struct {
	CountFunc func(ctx context.Context) (int, error)

	DeleteFunc func(ctx context.Context, publicID string) error

	CreateFunc func(ctx context.Context, elem {{.PackageName}}.Identity) error

	GetFunc func(ctx context.Context, publicID string) ({{.PackageName}}.Identity, error)

	UpdateFunc func(ctx context.Context, publicID string, elem {{.PackageName}}.Identity) error

	GetAllByOrderFunc func(ctx context.Context, order string, orderBy string) ([]{{.PackageName}}.Identity, error)

	GetByFieldFunc func(ctx context.Context, key string, value interface{}) ({{.PackageName}}.Identity, error)

	GetAllFunc func(ctx context.Context, order string, orderBy string, page int, responsePerPage int) ([]{{.PackageName}}.Identity, int, error)
}

// Count implements the IdentityDBBackend.Count() method for IdentityDB.
func (impl IdentityDB) Count(ctx context.Context) (int, error) {

	ret1, ret2 := impl.CountFunc(ctx)
	return ret1, ret2

}

// Delete implements the IdentityDBBackend.Delete() method for IdentityDB.
func (impl IdentityDB) Delete(ctx context.Context, publicID string) error {

	ret1 := impl.DeleteFunc(ctx, publicID)
	return ret1

}

// Create implements the IdentityDBBackend.Create() method for IdentityDB.
func (impl IdentityDB) Create(ctx context.Context, elem {{.PackageName}}.Identity) error {

	ret1 := impl.CreateFunc(ctx, elem)
	return ret1

}

// Get implements the IdentityDBBackend.Get() method for IdentityDB.
func (impl IdentityDB) Get(ctx context.Context, publicID string) ({{.PackageName}}.Identity, error) {

	ret1, ret2 := impl.GetFunc(ctx, publicID)
	return ret1, ret2

}

// Update implements the IdentityDBBackend.Update() method for IdentityDB.
func (impl IdentityDB) Update(ctx context.Context, publicID string, elem {{.PackageName}}.Identity) error {

	ret1 := impl.UpdateFunc(ctx, publicID, elem)
	return ret1

}

// GetAllByOrder implements the IdentityDBBackend.GetAllByOrder() method for IdentityDB.
func (impl IdentityDB) GetAllByOrder(ctx context.Context, order string, orderBy string) ([]{{.PackageName}}.Identity, error) {

	ret1, ret2 := impl.GetAllByOrderFunc(ctx, order, orderBy)
	return ret1, ret2

}

// GetByField implements the IdentityDBBackend.GetByField() method for IdentityDB.
func (impl IdentityDB) GetByField(ctx context.Context, key string, value interface{}) ({{.PackageName}}.Identity, error) {

	ret1, ret2 := impl.GetByFieldFunc(ctx, key, value)
	return ret1, ret2

}

// GetAll implements the IdentityDBBackend.GetAll() method for IdentityDB.
func (impl IdentityDB) GetAll(ctx context.Context, order string, orderBy string, page int, responsePerPage int) ([]{{.PackageName}}.Identity, int, error) {

	ret1, ret2, ret3 := impl.GetAllFunc(ctx, order, orderBy, page, responsePerPage)
	return ret1, ret2, ret3

}

