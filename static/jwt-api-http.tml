
// JWTAPI defines a struct which holds the http api handlers for providing CRUD
// operations for the provided {{quote .Struct.Object.Name.Name}} type.
type JWTAPI struct{
	metrics metrics.Metrics
	operator IdentityBackend
}

// New returns a new JWTAPI instance using the provided operator and
// metric.
func New(m metrics.Metrics, backend IdentityBackend) *JWTAPI {
	return &JWTAPI{
		metrics: m,
		operator: backend,
	}
}

// Info receives an http request to get record info for all available records of type {{quote .Struct.Object.Name.Name}}.
//
// Route: /{Route}/info
// Method: INFO
// RESPONSE-BODY: JSON
func (api *JWTAPI) Info(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("JWTAPI.Info"), metrics.WithTrace(m.End()))

	ctx.Header().Set("Content-Type", "application/json")

	api.metrics.Emit(metrics.Info("Info request received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
	}))


	total, err := api.operator.Count(ctx.Context())
	if err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get IdentityRecord record count"),metrics.WithFields(metrics.Field{
			"error": err,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	if err := ctx.JSON(http.StatusOK, IdentityInfo{Total:total}); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get serialized Identity record to response writer"), metrics.WithFields(metrics.Field{
			"error": err,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("Response Delivered"),metrics.WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"status": http.StatusOK,
	}))

	return nil
}

// Update receives an http request to create a new {{quote .Struct.Object.Name.Name}}.
//
// Route: /{Route}/:public_id
// Method: PUT
// BODY: JSON
//
func (api *JWTAPI) Update(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("JWTAPI.Update"),metrics.WithTrace(m.End()))

	ctx.Header().Set("Content-Type", "application/json")

	api.metrics.Emit(metrics.Info("Update request received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
	}))


	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params"),metrics.WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return errors.New("publicId parameter not found")
	}


	var incoming Identity

	if err := json.NewDecoder(ctx.Body()).Decode(&incoming); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to decode request body"),metrics.WithFields(metrics.Field{
			"error":     err.Error(),
			"public_id": publicID,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("JSON received"),metrics.WithFields(metrics.Field{
		"data": incoming,
		"url": ctx.Request().URL.String(),
		"public_id": publicID,
	}))

	if err := api.operator.Update(ctx.Context(), publicID, incoming); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to parse params and url.Values"),metrics.WithFields(metrics.Field{
			"error": err,
			"public_id": publicID,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("Response Delivered"),metrics.WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusNoContent,
	}))

	return ctx.NoContent(http.StatusNoContent)
}

// Delete receives an http request to create a new {{quote .Struct.Object.Name.Name}}.
//
// Route: /{Route}/:public_id
// Method: DELETE
//
func (api *JWTAPI) Delete(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("JWTAPI.Delete"),metrics.WithTrace(m.End()))

	api.metrics.Emit(metrics.Info("Delete request received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
	}))

	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params"),metrics.WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return fmt.Errorf("No public_id provided in params")
	}

	api.metrics.Emit(metrics.Info("JSON received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
		"public_id": publicID,
	}))

	if err := api.operator.Delete(ctx.Context(), publicID); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to delete IdentityRecord record"),metrics.WithFields(metrics.Field{
			"error": err,
			"public_id": publicID,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("Response Delivered"),metrics.WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusNoContent,
	}))

	return ctx.NoContent(http.StatusNoContent)
}

// Get receives an http request to create a new {{quote .Struct.Object.Name.Name}}.
//
// Route: /{Route}/:public_id
// Method: GET
// RESPONSE-BODY: JSON
func (api *JWTAPI) Get(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("JWTAPI.Get"),metrics.WithTrace(m.End()))

	ctx.Header().Set("Content-Type", "application/json")

	api.metrics.Emit(metrics.Info("Get request received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
	}))

	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params"),metrics.WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return errors.New("public_id parameter not found")
	}

	requested, err := api.operator.Get(ctx.Context(), publicID)
	if err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get IdentityRecord record"),metrics.WithFields(metrics.Field{
			"error": err,
			"public_id": publicID,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	if err := ctx.JSON(http.StatusOK, requested); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get serialized IdentityRecord record to response writer"),metrics.WithFields(metrics.Field{
			"error": err,
			"public_id": publicID,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("Response Delivered"),metrics.WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusOK,
	}))

	return nil
}

// GetAll receives an http request to return all {{quote .Struct.Object.Name.Name}} records.
//
// Route: /{Route}/
// Method: GET
// RESPONSE-BODY: JSON
func (api *JWTAPI) GetAll(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("JWTAPI.GetAll"),metrics.WithTrace(m.End()))

	ctx.Header().Set("Content-Type", "application/json")

	api.metrics.Emit(metrics.Info("GetAll request received"),metrics.WithFields(metrics.Field{
		"url": ctx.Request().URL.String(),
	}))

	var order, orderBy string

	if od, ok := ctx.Bag().Get("order"); ok {
		if ordr, ok := od.(string); ok {
			order = ordr
		} else {
			order = "asc"
		}
	}

	if od, ok := ctx.Bag().Get("orderBy"); ok {
		if ordr, ok := od.(string); ok {
			orderBy = ordr
		} else {
			orderBy = "public_id"
		}
	}

	var err error
	var pageNo, responsePerPage int

	if rpp, ok := ctx.Bag().GetString("responsePerPage"); ok {
		responsePerPage, err = strconv.Atoi(rpp)
		if err != nil {
			api.metrics.Emit(metrics.Errorf("Failed to retrieve responserPerPage number details"),metrics.WithFields(metrics.Field{
				"error":     err,
				"url":       ctx.Request().URL.String(),
			}))
		}
	}else{
		responsePerPage = -1
	}

	if pg, ok := ctx.Bag().GetString("page"); ok {
		pageNo, err = strconv.Atoi(pg)
		if err != nil {
			api.metrics.Emit(metrics.Errorf("Failed to retrieve page number details"),metrics.WithFields(metrics.Field{
				"error":     err,
				"url":       ctx.Request().URL.String(),
			}))
		}
	}else {
		pageNo = -1
	}

	requested, total, err := api.operator.GetAll(ctx.Context(), order, orderBy, pageNo, responsePerPage)
	if err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get all IdentityRecord record"),metrics.WithFields(metrics.Field{
			"error": err,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	if err := ctx.JSON(http.StatusOK,Identities{
		Page: pageNo,
		Records: requested,
		TotalRecords: total,
		ResponsePerPage: responsePerPage,
	}); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to get serialized IdentityRecord record to response writer"),metrics.WithFields(metrics.Field{
			"error": err,
			"url": ctx.Request().URL.String(),
		}))

		return err
	}

	api.metrics.Emit(metrics.Info("Response Delivered"),metrics.WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"status": http.StatusOK,
	}))

	return nil
}
